/*
  This file is automatically generated. Any changes will be overwritten.
  Modify find-a-car.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { LabelComponent } from '@radzen/angular/dist/label';
import { DatePickerComponent } from '@radzen/angular/dist/datepicker';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { GridComponent } from '@radzen/angular/dist/grid';
import { FormComponent } from '@radzen/angular/dist/form';
import { SchedulerComponent } from '@radzen/angular/dist/scheduler';

import { ConfigService } from '../config.service';
import { BookComponent } from '../book/book.component';

import { RadzenRentacarService } from '../radzen-rentacar.service';
import { SecurityService } from '../security.service';

export class FindACarGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('label1') label1: LabelComponent;
  @ViewChild('datepicker0') datepicker0: DatePickerComponent;
  @ViewChild('label2') label2: LabelComponent;
  @ViewChild('datepicker1') datepicker1: DatePickerComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('scheduler0') scheduler0: SchedulerComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  radzenRentacar: RadzenRentacarService;

  security: SecurityService;
  start: any;
  end: any;
  getOrdersResult: any;
  getAvailableCarsResult: any;
  getAvailableCarsCount: any;
  parameters: any;
  getCarsResult: any;
  getCarsCount: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.radzenRentacar = this.injector.get(RadzenRentacarService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.start = new Date();

    this.end = new Date(new Date().getTime() + 86400000 * 5);

    this.radzenRentacar.getOrders(null, null, null, null, null, `Car`, null, null)
    .subscribe((result: any) => {
      this.getOrdersResult = result.value;
    }, (result: any) => {

    });

    this.radzenRentacar.getAvailableCars(`${this.end.toISOString()}`, `${this.start.toISOString()}`, null, this.grid0.allowPaging ? this.grid0.pageSize : null, this.grid0.allowPaging ? 0 : null, null, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getAvailableCarsResult = result.value;

      this.getAvailableCarsCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  button0Click(event: any) {
    this.radzenRentacar.getAvailableCars(`${this.end.toISOString()}`, `${this.start.toISOString()}`, null, this.grid0.allowPaging ? this.grid0.pageSize : null, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getCarsResult = result.value;

      this.getCarsCount = result.value.length;
    }, (result: any) => {

    });
  }

  grid0LoadData(event: any) {
    this.radzenRentacar.getAvailableCars(`${this.end.toISOString()}`, `${this.start.toISOString()}`, `${event.filter}`, this.grid0.allowPaging ? event.top : null, this.grid0.allowPaging ? event.skip : null, `${event.orderby}`, this.grid0.allowPaging, null, null, null)
    .subscribe((result: any) => {
      this.getAvailableCarsResult = result.value;

      this.getAvailableCarsCount = this.grid0.allowPaging ? result['@odata.count'] : result.value.length;
    }, (result: any) => {

    });
  }

  button1Click(event: any, data: any) {
    this.dialogService.open(BookComponent, { parameters: {start: this.start.toISOString(), end: this.end.toISOString(), CarId: data.Id}, title: 'Book' });
  }
}
